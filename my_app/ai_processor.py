# ai_processor.py
import time
import os
import sqlite3
# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
from database import initialize_database, get_tasks_by_status, update_task_status, update_task_response, get_credentials, get_auto_reply_setting, update_auto_reply_setting
from agent_setup import initialize_sql_agent
from linebot import LineBotApi
from linebot.models import TextSendMessage
from linebot.exceptions import LineBotApiError
# from utils.memory_checker import MemoryCheckerCallback # ‡∏ï‡πâ‡∏≠‡∏á import ‡∏Ñ‡∏•‡∏≤‡∏™
# from google.generativeai.errors import APIError

# ----------------------------------------------------------------------
# ‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà 1: ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡πÉ‡∏ô Global Scope ‡∏≠‡∏≠‡∏Å
#    Agent ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ user_id ‡πÅ‡∏•‡∏∞ line_id ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
# ----------------------------------------------------------------------
# Initialize database URI (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
db_uri_to_use = initialize_database()
AGENT_MODEL_CHOICE = "gemini-2.5-flash"

# ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å:
# sql_agent_executor = initialize_sql_agent(db_uri_to_use, "gemini-2.5-flash")
# if not sql_agent_executor:
#     print("Failed to initialize AI Agent. Exiting...")
#     exit()
# ----------------------------------------------------------------------

def send_message_to_line(line_id, message, channel_access_token):
    """Sends a message to the LINE user via push message."""
    try:
        line_bot_api = LineBotApi(channel_access_token)
        line_bot_api.push_message(
            line_id,
            TextSendMessage(text=message)
        )
        print(f"Successfully sent message to LINE user {line_id}.")
        return True
    except LineBotApiError as e:
        print(f"LINE API Error when sending message to {line_id}: {e}")
        return False
    except Exception as e:
        print(f"General error when sending message to {line_id}: {e}")
        return False

def process_pending_tasks():
    user_id = "d65e044b-1136-4020-9b72-e3b7e5092d30"
    
    print("Looking for pending tasks...")
    pending_tasks = get_tasks_by_status(user_id, "Pending")
    
    if not pending_tasks:
        print("No pending tasks found.")
        return

    print(f"Found {len(pending_tasks)} pending tasks. Processing...")
    
    for task in pending_tasks:
        task_id = task['task_id']
        user_message = task['user_message']
        line_id = task['line_id']
        
        print(f"Processing task_id: {task_id} for user {user_id}.")
        
        try:
            is_auto_reply_enabled = get_auto_reply_setting(user_id)
            
            # ------------------------------------------------------------------
            # üîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î Memory
            # ------------------------------------------------------------------
            sql_agent_executor = initialize_sql_agent(db_uri_to_use, AGENT_MODEL_CHOICE, user_id, line_id)
            if not sql_agent_executor:
                raise Exception("Failed to initialize AI Agent for task.")
            # ------------------------------------------------------------------
            
            response = sql_agent_executor.invoke({"input": user_message})
            
            # ------------------------------------------------------------------
            # üîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB
            # ------------------------------------------------------------------
            ai_response_raw = response.get("output", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
            response_message, delimiter, sql_command_raw = ai_response_raw.partition("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:")
            sql_command = sql_command_raw.strip()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL
            update_task_response(task_id, response_message.strip(), sql_command if sql_command else "None")
            # ------------------------------------------------------------------
            
            if is_auto_reply_enabled:
                print(f"Auto-reply is enabled. Sending message for task {task_id}.")
                credentials_data = get_credentials(user_id)
                if credentials_data:
                    # ‡πÉ‡∏ä‡πâ response_message ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                    send_message_to_line(line_id, response_message.strip(), credentials_data['channel_access_token'])
                else:
                    print(f"Credentials not found for user {user_id}. Cannot send message.")
                    update_task_status(task_id, "Error")
            else:
                print(f"Auto-reply is disabled. Updating status to Awaiting_Approval for task {task_id}.")
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Awaiting_Approval ‡∏´‡∏≤‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                update_task_status(task_id, "Awaiting_Approval")
            
        except Exception as e:
            print(f"Error processing task {task_id}: {e}")
            update_task_status(task_id, "Error")

# def process_new_tasks(user_id, line_id, user_message, task_id):
#     """Processes a single, newly added task for the AI Agent."""
#     print(f"Processing new task {task_id} for user {user_id} and line_id {line_id}.")
    
#     try:
#         is_auto_reply_enabled = get_auto_reply_setting(user_id)      
        
#         # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent (‡∏≠‡∏≤‡∏à‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None)
#         sql_agent_executor = initialize_sql_agent(db_uri_to_use, AGENT_MODEL_CHOICE, user_id, line_id)
        
#         # 2. üõë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Agent
#         if not sql_agent_executor:
#             # ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ Agent ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏ä‡πà‡∏ô API Key ‡∏ú‡∏¥‡∏î)
#             print(f"üõë FATAL ERROR: initialize_sql_agent returned None for task {task_id}. Check API Key/LLM setup.")
#             update_task_status(task_id, "FatalError") 
#             return # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Memory)
        
#         # ----------------------------------------------------
#         # üõë ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DEBUG (‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Agent ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) üõë
#         # ----------------------------------------------------
#         # ‚ö†Ô∏è ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î Debug ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 'if not sql_agent_executor:'
#         print("\n--- DEBUG: AGENT SUCCESSFUL. LOADING HISTORY NOW ---")
        
#         # ‚ö†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Memory (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
#         memory_loaded = None 
        
#         try:
#             # ‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Memory ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
#             memory_loaded = sql_agent_executor.memory 
#         except AttributeError:
#             # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á .memory ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
#             print("WARNING: Could not access .memory attribute on AgentExecutor. Skipping history display.")
#             # üõë ‡∏•‡∏ö 'return' ‡∏≠‡∏≠‡∏Å! üõë
#             pass 
        
#         if memory_loaded:
#             # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ history ‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á Messages
#             current_history = memory_loaded.load_memory_variables({})['chat_history'] 
#             print("*********")
#             for message in current_history:
#                 # ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
#                 print(f"[{message.type.upper()}]: {message.content}") 
            
#             print("-------------------------------------------\n")
        
#         # ----------------------------------------------------
        
#         # 3. Invoke the AI Agent with the user's message
#         # response = sql_agent_executor.invoke({"input": user_message})

#         response = sql_agent_executor.invoke(
#             {"input": user_message},
#             config={"callbacks": [MemoryCheckerCallback()]} # ‚¨ÖÔ∏è ‡πÉ‡∏™‡πà Callback ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
#         )

        
#         ai_response_raw = response.get("output", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")     
        
#         # 4. ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ SQL ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
#         response_message, delimiter, sql_command_raw = ai_response_raw.partition("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:")
#         sql_command = sql_command_raw.strip()
#         final_response_message = response_message.strip() # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        
#         if is_auto_reply_enabled:
#             print(f"Auto-reply is enabled. Sending message for task {task_id}.")
#             credentials_data = get_credentials(user_id)
#             if credentials_data:
                
#                 # ‚ùå ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô if block ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                
#                 # 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á LINE ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
#                 if sql_command:
#                     update_task_response(task_id, final_response_message, sql_command) 
#                 else:
#                     update_task_response(task_id, final_response_message, "None")
                
#                 # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Line (‡πÉ‡∏ä‡πâ final_response_message)
#                 send_message_to_line(line_id, final_response_message, credentials_data['channel_access_token'])
#             else:
#                 print(f"Credentials not found for user {user_id}. Cannot send message.")
#                 update_task_status(task_id, "Error")
#         else:
#             print(f"Auto-reply is disabled. Updating status to Awaiting_Approval for task {task_id}.")
#             update_task_status(task_id, "Awaiting_Approval")
            
#     except Exception as e:
#         # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î Exception ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DB, ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô invoke)
#         print(f"Error processing task {task_id}: {e}")
#         update_task_status(task_id, "Error")


def process_new_tasks(user_id, line_id, user_message, task_id):
    """Processes a single, newly added task for the AI Agent with Retry Logic."""
    print(f"Processing new task {task_id} for user {user_id} and line_id {line_id}.")
    
    # üü¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Retry
    MAX_RETRIES = 5 
    BASE_WAIT_TIME = 5 # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏≠ 5, 10, 20, ...

    for attempt in range(MAX_RETRIES):
        try:
            is_auto_reply_enabled = get_auto_reply_setting(user_id)      
            
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent (‡∏≠‡∏≤‡∏à‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None)
            sql_agent_executor = initialize_sql_agent(db_uri_to_use, AGENT_MODEL_CHOICE, user_id, line_id)
            
            # 2. üõë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Agent
            if not sql_agent_executor:
                # Fatal Error ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö 503 (‡πÄ‡∏ä‡πà‡∏ô API Key ‡∏ú‡∏¥‡∏î)
                print(f"üõë FATAL ERROR: initialize_sql_agent returned None for task {task_id}. Check API Key/LLM setup.")
                update_task_status(task_id, "FatalError") 
                return 
            
            # ----------------------------------------------------
            # üõë ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DEBUG (‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Agent ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) üõë
            # ----------------------------------------------------
            print("\n--- DEBUG: AGENT SUCCESSFUL. LOADING HISTORY NOW ---")
            
            memory_loaded = None 
            
            try:
                memory_loaded = sql_agent_executor.memory 
            except AttributeError:
                print("WARNING: Could not access .memory attribute on AgentExecutor. Skipping history display.")
                pass 
            
            if memory_loaded:
                current_history = memory_loaded.load_memory_variables({})['chat_history'] 
                print("*********")
                for message in current_history:
                    print(f"[{message.type.upper()}]: {message.content}") 
                
                print("-------------------------------------------\n")
            
            # ----------------------------------------------------
            
            # 3. Invoke the AI Agent with the user's message
            # ‡∏•‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Callback ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            response = sql_agent_executor.invoke({"input": user_message})

            
            ai_response_raw = response.get("output", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")     
            
            # 4. ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ SQL ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            response_message, delimiter, sql_command_raw = ai_response_raw.partition("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:")
            sql_command = sql_command_raw.strip()
            final_response_message = response_message.strip() # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            
            # 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á LINE
            if sql_agent_executor:
                print(f"Auto-reply is enabled. Sending message for task {task_id}.")
                credentials_data = get_credentials(user_id)
                if credentials_data:
                    
                    if sql_command:
                        update_task_response(task_id, final_response_message, sql_command) 
                    else:
                        update_task_response(task_id, final_response_message, "None")
                    
                    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Line (‡πÉ‡∏ä‡πâ final_response_message)
                    send_message_to_line(line_id, final_response_message, credentials_data['channel_access_token'])
                    update_task_status(task_id, "Responded") # üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                else:
                    print(f"Credentials not found for user {user_id}. Cannot send message.")
                    update_task_status(task_id, "Error")
            else:
                print(f"Auto-reply is disabled. Updating status to Awaiting_Approval for task {task_id}.")
                update_task_status(task_id, "Awaiting_Approval")
            
            # üü¢ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Loop ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            return 
        
        # üü¢ ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Error ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Rate Limit ‡∏´‡∏£‡∏∑‡∏≠ Server Overload
        except Exception as e:
            error_message = str(e).lower()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error 429 (Rate Limit) ‡∏´‡∏£‡∏∑‡∏≠ 503 (Overloaded) ‡∏´‡∏£‡∏∑‡∏≠ 500
            is_retryable = ("429" in error_message or 
                            "503" in error_message or 
                            "500" in error_message)

            if is_retryable and attempt < MAX_RETRIES - 1:
                # üü¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏ß‡∏µ‡∏Ñ‡∏π‡∏ì (Exponential Backoff)
                wait_time = BASE_WAIT_TIME * (2 ** attempt) + (attempt * 2)
                
                print(f"Attempt {attempt + 1} failed (Error: {e}). Retrying in {wait_time} seconds...")
                time.sleep(wait_time) 
            else:
                # üü¢ ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô Error ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                print(f"Max retries reached or unrecoverable error for Task {task_id}: {e}")
                
                # 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Error
                update_task_status(task_id, "Error")
                
                # 2. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                credentials_data = get_credentials(user_id)
                if credentials_data:
                    line_bot_api_dynamic = LineBotApi(credentials_data['channel_access_token'])
                    # ‡πÉ‡∏ä‡πâ push_message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ reply_token ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    line_bot_api_dynamic.push_message(
                        line_id,
                        TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞")
                    )
                # 3. ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà raise e ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Webhook ‡∏û‡∏±‡∏á)
                return 